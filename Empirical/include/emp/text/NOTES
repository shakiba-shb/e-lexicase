Supported text formats:
 TXT (plain text)
 HTML
 LATEX
 MARKDOWN
 RTF
 XML

+ Custom Empirical markup language, Emphatic

 *
 *  Internal format is .emp, which uses just a backquote (`) as a special character.  It
 *  is otherwise heavily inspired from markdown, but makes special characters less tricky
 *  to use in your writing.
 *
 *  The following tags toggle a formatting style.
 *
 *  `*Bold!`*
 *  ``Code``
 *  `/Italic`/
 *  `_Underlined!`_
 *  `^Superscript`^
 *  `.Subscript`.
 *  `~Strikethrough`~
 *
 *  The following tags grab the rest of the line they are on.  These should generally
 *  be the first non-whitespace on a line, but if they are not a newline will be assumed
 *  to be before them.
 *
 *  `# Heading level 1
 *  `## Heading level 2
 *  `### etc.
 *  `" Blockquote
 *  `- Bulleted list entry
 *  `+ Numbered list entry
 *  `| Continues the previous line for other tags in this group.
 *  `% Comment that will be removed.
 *
 *  `[Include a link name here](http://and.its.url.here)
 *  `<http://just.a.url.here>
 *  `![Link/to/image/here.jpg](with an optional URL link)
 *
 *  Now for the crazy.  We can embed code as needed.
 *
 *  `{variable = value || other_code}
 *  `$var_value_printed_here$
 *
 *  Anything with four spaces at the beginning will be treated like indented code.
 *  Add a `= at the beginning of a line if you don't want special formatting.
 *
 *  A single or double backtick indicates that everything in between is going to be inline
 *  code.  A single backtick must be followed by an alphanumeric character or whitespace,
 *  but a double backtick can be followed by anything.
 *
 *  `This would be rendered as CODE`
 *  ``{This would also be code}``
 *
 *  Escape characters do work.
 *  \\ is a regular backslash ('\')
 *  \` is a backtick in the actual string ('`')
 *  \  (backlash space) is a non-breaking space.
 *  \n is a newline
 *  \t is a tab


Some saved notes:
    // Tag layout differs substantially from one language to the next.  For example, to make
    // text have the style "bold", it may look like:
    //   HTML:      One word is <b>bold</b>.
    //   MarkDown:  One word is *bold*.
    //   LaTeX:     One word is \textbf{bold}.
    //   Emphatic:  One word is `*bold`*
    //
    // Some styles need to have arguments associated with them.  For example, a heading needs
    // to have a level.  A level 3 heading, for example, would be stored as style "heading:3".
    //   HTML:      <h3>A level 3 heading</h3>
    //   MarkDown:  ### A level 3 heading
    //   LaTeX:     \subsubsection{A level 3 heading}
    //   Emphatic:  `### A level 3 heading
    //
    // The patterns associated with these can either be broken up into multiple tags (for example,
    // in LaTeX it's easier to match a specific "\subsubsection{" open tag with "header:3" style),
    // while HTML can use the pattern "H$d" mapping to "header:$0".  In Markdown we would use
    // "$r{#}" mapping to "header:$0"
    //
    // Finally, more complex tags are possible.  For example, if a tag is supposed to map a
    // series of words to a linked URL:
    //   HTML:      This is <a href="http://www.exmaple.com/">linked</a> text.
    //   MarkDown:  This is [linked](http://www.exmaple.com/) text.
    //   LaTeX:     This is \href{http://www.exmaple.com/}{linked} text.
    //   Emphatic:  This is `[linked](http://www.exmaple.com/) text.
    //
    // For these patterns, HTML open would look like: <a href="%u">
    // And it would be set to the style: "link:$0".

Original comments on tag pattern:
      // What pattern will identify this tag?  Any characters EXCEPT $ will be taken literally.
      // $$ will be a single $.  A $ followed by a letter will have a specific meaning.
      //   $d = A single digit (0 to 9)
      //   $f = Any filename (includes a-z, A-Z, 0-9, '_', '/', '.', and '-')
      //   $i = Any identifier sequence (includes a-z, A-Z, 0-9 and '_')
      //   $n = Any whole number sequence (a series of digits)
      //   $r{pattern} = A repeated pattern
      //   @CAO FUTURE ADDITION: $t = Any normal text
      //   $u = Any URL

For style replacements:
      // A more complex style uses a replacement pattern to generate its description.  It can use $0
      // through $9 for the $letter material in the pattern. (e.g., a font should track the
      // name of the font.)

And for converting a pattern to a normal regex:
      std::string AsRegEx() {
        std::string out;
        for (size_t i = 0; i < pattern.size(); ++i) {
          if (pattern[i] == '$') {
            ++i;
            emp_assert(i < pattern.size());
            switch (pattern[i]) {
              case '$': out += "$"; break;
              case 'd': out += "[0-9]"; break;
              case 'f': out += "[a-zA-Z0-9_/.-]+"; break;
              case 'i': out += "[a-zA-Z0-9_]+"; break;
              case 'n': out += "[0-9]+"; break;
              case 'r':
                {
                  size_t start = i;
                  i = emp::find_paren_match(pattern, i, '{', '}', false);
                  out += "\"" + pattern.substr(start+1, i-start-1) + "\"+";
                }
                break;
              case 't': out += "[]"; break;
              case 'u': out += "[a-zA-Z0-9_/.+:-]"; break;
            }
          }
          else if (pattern[0] == '[') out += "[\\[]";
          else if (pattern[0] == ']') out += "[\\]]";
          else if (pattern[0] == '*') out += "[*]";
          else if (pattern[0] == '.') out += "[.]";
          else if (pattern[0] == '+') out += "[+]";
          else if (pattern[0] == '?') out += "[?]";
          else if (pattern[0] == '|') out += "[|]";
          else if (pattern[0] == '(') out += "[()]";
          else if (pattern[0] == ')') out += "[)]";
          else out += pattern[i];
        }
        return out;
      }
